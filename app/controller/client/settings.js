/*
 * File: app/controller/client/settings.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Instinct.controller.client.settings', {
    extend: 'Ext.app.Controller',

    config: {
    },

    getSetting: function(name) {
        if(name in settings.settings){
            return settings.settings[name];
        } else {
            return false;
        }
    },

    setSetting: function(key, value, clb) {
        if (window.sqlitePlugin) {
            sqlite.getRows(
                'settings',
                ['key'],
                [key],
                function(results){
                    if(results){
                        sqlite.updateRow('settings', results[0].id, ['key', 'value'], [key, value], function(result){ clb(); });
                    } else {
                        sqlite.insertRow('settings',['key', 'value'], [key, value], function(result){ clb(); });
                    }
                    settings.settings[key] = value;
                }
            );
        }else{
            //console.log("Localstore as backup!");
            localStorage.setItem(key, value);
            clb();
        }
    },

    loadSettings: function(callbackfn) {
        if(window.cordova && window.sqlitePlugin){

            settings = {
                loadSettings: this.loadSettings,
                get: this.getSetting,
                set: this.setSetting,
                removeAll: this.removeAll,
                settings: {}
            };

            // Create settings table
            sqlite.createTable('settings', ['key', 'value'], ['text', 'text'], function(){
                sqlite.query("SELECT * FROM Settings", [], function(result){
                    data = sqlite.fetch(result);

                    settings.settings = {};
                    Ext.each(data, function(setting){
                        settings.settings[setting.key] = setting.value;
                    });

                    callbackfn(settings.settings);
                });

            });

        } else {
            settings = {

                loadSettings: function(callbackFn){ callbackFn(); },
                get: function(name){
                    var myStoreSearch = localStorage.getItem(name);
                    if(myStoreSearch === null && typeof myStoreSearch === "object"){
                        return false;
                    }else{
                        return myStoreSearch;
                    }
                },
                set: function(key, value, clb){
                    localStorage.setItem(key, value);
                    if(typeof clb == 'function'){
                        clb();
                    }
                    return false;
                },
                removeAll: function(callbackFn){
                    callbackFn();
                    return true;
                }
            };

            callbackfn(settings.settings);

            if(window.cordova){
                Ext.Msg.alert(false, 'ERROR: SQLITE PLUGIN NOT WORKING!');
            }
        }
    },

    removeAll: function(callbackFn) {
        if (window.sqlitePlugin) {
            sqlite.query("DELETE FROM Settings", [], function(result){ callbackFn(); });
        }else{
            window.localStorage.clear();
            callbackFn();
        }
    },

    prepSettings: function() {
        console.log('settings done');
        this.settings = {};
        Ext.define('settings', {
            singleton: true,
            loadSettings: this.loadSettings,
            get: this.getSetting,
            set: this.setSetting
        });
        console.log(this);
    }

});