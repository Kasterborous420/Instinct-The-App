/*
 * File: app/controller/nativeFunctions/Sqlite.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Instinct.controller.nativeFunctions.Sqlite', {
    extend: 'Ext.app.Controller',

    config: {
    },

    query: function(query, params, callbackFn, failureFn) {
        if(typeof callbackFn !== 'function'){
            callbackFn = function (e) {
                console.log('Query success: '+query, params);
            };
        }

        if(typeof failureFn !== 'function'){
            failureFn = function (e) {
                console.log(e.message, query, params);
            };
        }

        sqlite.database.executeSql(
            query,
            params,
            callbackFn,
            failureFn
        );
    },

    fetch: function(result) {
        var data = [];
        for (var index = 0; index < result.rows.length; index++) {
            data.push(result.rows.item(index));
        }
        return data;
    },

    getRows: function(tableName, fieldNames, fieldValues, callbackFn, failureFn) {
        var queryFields = [];
        Ext.each(fieldNames, function(fieldName, index){
            queryFields.push('`'+fieldName+'` = ?');
        });
        fields = queryFields.join(' AND ');

        if(fieldNames.length > 0){
            whereString = " WHERE "+fields;
        } else {
            whereString = '';
        }

        sqlite.query(
            "SELECT * FROM `"+tableName+"`"+whereString,
            fieldValues,
            function(result){
                if(result.rows.length > 0){
                    callbackFn(sqlite.fetch(result));
                } else {
                    callbackFn(false);
                }
            },
            failureFn
        );
    },

    createTable: function(name, fieldNames, fieldTypes, callbackFn, failureFn) {
        var queryFields = [];

        Ext.each(fieldNames, function(fieldName, index){
            if(fieldTypes[index]){
                fieldType = fieldTypes[index];
            } else {
                fieldType = 'text';
            }

            queryFields.push('`'+fieldName+'` '+fieldType);
        });

        if(queryFields.length){
            fields = ','+queryFields.join(', ');
        } else {
            fields = '';
        }

        sqlite.query(
            "CREATE TABLE IF NOT EXISTS `"+name+"` (`id` INTEGER PRIMARY KEY"+fields+");",
            [],
            callbackFn,
            failureFn
        );
    },

    insertRow: function(tableName, fieldNames, fieldValues, callbackFn, failureFn) {
        var queryFields = [];

        Ext.each(fieldNames, function(fieldName, index){
            queryFields.push('`'+fieldName+'`');
        });

        fields = queryFields.join(', ');

        var queryFields = [];
        Ext.each(fieldValues, function(fieldValue, index){
            queryFields.push('?');
        });

        values = queryFields.join(', ');
        sqlite.query(
            "INSERT INTO `"+tableName+"` ("+fields+") VALUES ("+values+");",
            fieldValues,
            function(result){
                callbackFn(result.insertId);
            },
            failureFn
        );
    },

    updateRow: function(tableName, rowId, fieldNames, fieldValues, callbackFn, failureFn) {
        var queryFields = [];

        Ext.each(fieldNames, function(fieldName, index){
            queryFields.push('`'+fieldName+'` = ?');
        });

        fields = queryFields.join(', ');

        fieldValues.push(rowId);

        sqlite.query(
            "UPDATE `"+tableName+"` SET "+fields+" WHERE `id` = ?;",
            fieldValues,
            function(){
                callbackFn(rowId);
            },
            failureFn
        );
    },

    openDatabase: function(callbackFn) {
        if(window.cordova && window.sqlitePlugin){
            Ext.define('sqlite', {
                singleton: true,

                insertRow: this.insertRow,
                updateRow: this.updateRow,
                getRows: this.getRows,
                query: this.query,
                createTable: this.createTable,
                fetch: this.fetch
            });
            window.sqlitePlugin.openDatabase({
                name: "database.sqlite",
                location: 2,
                androidDatabaseImplementation: 2
            }, function(db){
                sqlite.database = db;
                callbackFn();
            });
        } else {
            console.log('ERROR: SQLITE PLUGIN NOT FOUND!');
            if(window.cordova){
                Ext.Msg.alert(false, 'ERROR: SQLITE PLUGIN NOT FOUND!');
            }
            callbackFn();
        }

    }

});