/*
 * File: app/controller/user/Register.js
 *
 * This file was generated by Sencha Architect version 3.5.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Instinct.controller.user.Register', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "userRegister button#registerButton": {
                tap: 'onRegisterTap'
            },
            "userRegister button#cancelButton": {
                tap: 'onCancelTap'
            }
        }
    },

    onRegisterTap: function(button, e, eOpts) {
        var check 		= Instinct.app.getController('nativeFunctions.cordova').cordovaCheck();
        var username 	= button.up("userRegister").down('textfield[name=username]').getValue();
        var email 		= button.up("userRegister").down('textfield[name=email]').getValue();
        var password 	= button.up("userRegister").down('textfield[name=password]').getValue();

        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Loading...'
        });

        var successCallback = function(resp, ops) {
            Ext.Viewport.unmask();
            setTimeout(function(){
                if(resp.status === 200){
                    var responseData = Ext.JSON.decode(resp.responseText);
                    if(responseData.success === true){
                        nav = button.up("navigationview");
                        nav.pop();
                        Ext.Msg.alert(false, responseData.successText);
                    }else{
                        Ext.Msg.alert(false, responseData.errorText);
                    }
                }else{
                    Ext.Msg.alert(false, "Register server down, Please try again later!");
                }
            },250);
        };

        var failureCallback = function(resp, ops) {
            Ext.Viewport.unmask();
            Ext.Msg.alert("Register Failure", resp);
        };

        if(username !== "" && password !== "" && email !== ""){
            if(check === true){
                var data 	= Instinct.app.getController('nativeFunctions.devicePlugin').phoneData();
                Ext.Ajax.request({
                    url: "http://iriks-it.nl/PokemonGo/Instinct/modules/authentication/register.php",
                    disableCaching: false,
                    headers: {
                        "Content-Type": "application/json"
                    },
                    method: 'POST',
                    jsonData: {
                        "username"		: username,
                        "password"		: password,
                        "email"			: email,
                        "uuid"			: data.uuid,
                        "platform"		: data.platform,
                        "model"			: data.model,
                        "manufacturer"	: data.manufacturer
                    },
                    success: successCallback,
                    failure: failureCallback
                });
            }else{
                Ext.Ajax.request({
                    url: "http://iriks-it.nl/PokemonGo/Instinct/modules/authentication/register.php",
                    disableCaching: false,
                    headers: {
                        "Content-Type": "application/json"
                    },
                    method: 'POST',
                    jsonData: {
                        "username"		: username,
                        "password"		: password,
                        "email"			: email,
                        "uuid"			: 'Unknown',
                        "platform"		: 'Unknown',
                        "model"			: 'Unknown',
                        "manufacturer"	: 'Unknown'
                    },
                    success: successCallback,
                    failure: failureCallback
                });
            }
        }else{
            Ext.Viewport.unmask();
            Ext.Msg.alert(false, "Please fill in the form");
        }
    },

    onCancelTap: function(button, e, eOpts) {
        nav = button.up("navigationview");
        nav.pop();
    }

});